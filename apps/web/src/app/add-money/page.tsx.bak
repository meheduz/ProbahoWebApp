"use client";
import { useState } from "react";
import { z } from "zod";
import { storage } from "../../lib/storage";
import { useRouter } from "next/navigation";

const mfsLimits = {
  bkash: { min: 10, max: 50000, daily: 100000 },
  nagad: { min: 10, max: 40000, daily: 80000 },
  rocket: { min: 10, max: 30000, daily: 60000 },
  upay: { min: 10, max: 25000, daily: 50000 }
} as const;

const AddMoneyPage = () => {
  const [amount, setAmount] = useState<string>("");
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleTopup = () => {
    try {
      setLoading(true);

      // Validate MFS selection
      if (!selectedMfs) {
        setError("Please select a payment method");
        return;
      }

      const schema = z.string().min(1).regex(/^\d+$/);
      const result = schema.safeParse(amount);

      if (!result.success) {
        setError("Please enter a valid amount");
        return;
      }

      const numAmount = Number(amount);
      
      // Add validation for reasonable amount
      if (numAmount < 10) {
        setError("Minimum amount is 10 BDT");
        return;
      }
      if (numAmount > 50000) {
        setError("Maximum amount is 50,000 BDT");
        return;
      }

      // MFS-specific limits
      const mfsLimits = {
        bkash: { min: 10, max: 50000, daily: 100000 },
        nagad: { min: 10, max: 40000, daily: 80000 },
        rocket: { min: 10, max: 30000, daily: 60000 },
        upay: { min: 10, max: 25000, daily: 50000 }
      };

      const selectedLimit = mfsLimits[selectedMfs as keyof typeof mfsLimits];
      if (numAmount > selectedLimit.max) {
        setError(`Maximum amount for ${selectedMfs} is ${selectedLimit.max.toLocaleString()} BDT`);
        return;
      }

      // Get current daily stats to check limits
      const dailyStats = storage.getDailyStats();
      if (dailyStats.received + numAmount > selectedLimit.daily) {
        setError(`Daily deposit limit (${selectedLimit.daily.toLocaleString()} BDT) exceeded for ${selectedMfs}`);
        return;
      }

      // Create a transaction record and update wallet
      storage.addTransaction({
        userId: '1', // In a real app, this would come from auth
        type: 'credit',
        amount: numAmount,
        currency: 'BDT',
        status: 'success',
        description: `Added money from ${mfsOptions.find(m => m.id === selectedMfs)?.name}`,
        mfsProvider: selectedMfs,
        note: `Added ${numAmount} BDT through ${selectedMfs}`
      });

      // Reset form and redirect
      setAmount("");
      setError("");
      router.push('/');
    } catch (err) {
      setError("Something went wrong. Please try again.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const mfsOptions = [
    { 
      id: 'bkash',
      name: 'bKash',
      logo: '/images/mfs/bkash.svg',
      color: 'bg-pink-50 hover:bg-pink-100',
      selectedColor: 'bg-pink-100',
      borderColor: 'border-pink-500'
    },
    { 
      id: 'nagad',
      name: 'Nagad',
      logo: '/images/mfs/nagad.svg',
      color: 'bg-orange-50 hover:bg-orange-100',
      selectedColor: 'bg-orange-100',
      borderColor: 'border-orange-500'
    },
    { 
      id: 'rocket',
      name: 'Rocket',
      logo: '/images/mfs/rocket.svg',
      color: 'bg-blue-50 hover:bg-blue-100',
      selectedColor: 'bg-blue-100',
      borderColor: 'border-blue-500'
    },
    { 
      id: 'upay',
      name: 'Upay',
      logo: '/images/mfs/upay.svg',
      color: 'bg-purple-50 hover:bg-purple-100',
      selectedColor: 'bg-purple-100',
      borderColor: 'border-purple-500'
    }
  ];

  const [selectedMfs, setSelectedMfs] = useState<string>('');

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Add Money to Wallet</h1>
      
      <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
        {/* MFS Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Select Payment Method
          </label>
          <div className="grid grid-cols-2 gap-4">
            {mfsOptions.map((mfs) => (
              <button
                key={mfs.id}
                onClick={() => {
                  setError("");
                  setSelectedMfs(mfs.id);
                }}
                disabled={loading}
                className={`relative flex items-center justify-center p-4 rounded-lg border-2 transition-all duration-200
                  ${selectedMfs === mfs.id 
                    ? mfs.selectedColor + ' ' + mfs.borderColor
                    : 'border-gray-200 ' + mfs.color
                  }
                `}
              >
                <div className="text-center">
                  <img 
                    src={mfs.logo}
                    alt={mfs.name}
                    className="h-8 w-auto mx-auto mb-2"
                    style={{ objectFit: 'contain' }}
                  />
                  <span className="block text-sm font-medium text-gray-700">
                    {mfs.name}
                  </span>
                </div>
                {selectedMfs === mfs.id && (
                  <div className="absolute top-2 right-2 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                    <svg className="w-3 h-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                )}
              </button>
            ))}
          </div>
        </div>

        {/* Amount Input */}
        <div className="mb-4">
          <label htmlFor="amount" className="block text-sm font-medium text-gray-700 mb-2">
            Amount (BDT)
          </label>
          <input
            type="number"
            id="amount"
            value={amount}
            onChange={(e) => {
              setError("");
              setAmount(e.target.value);
            }}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter amount"
            min="10"
            max="50000"
            disabled={loading}
          />
          {error && (
            <p className="mt-2 text-sm text-red-600">{error}</p>
          )}
        </div>

        <div className="flex flex-col gap-4">
          <button
            onClick={handleTopup}
            disabled={loading || !selectedMfs}
            className={`w-full py-2 px-4 rounded-md text-white font-medium transition-colors duration-200
              ${!selectedMfs 
                ? 'bg-gray-300 cursor-not-allowed'
                : loading 
                  ? 'bg-gray-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              }`}
          >
            {loading ? 'Processing...' : selectedMfs ? 'Add Money' : 'Select Payment Method'}
          </button>
          
          <button
            onClick={() => router.push('/')}
            disabled={loading}
            className="w-full py-2 px-4 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
        </div>

        <div className="mt-6">
          <h3 className="text-sm font-medium text-gray-700 mb-2">Important Notes:</h3>
          <ul className="text-sm text-gray-600 list-disc pl-5 space-y-1">
            {selectedMfs ? (
              <>
                <li>Selected Provider: {mfsOptions.find(m => m.id === selectedMfs)?.name}</li>
                <li>Minimum amount: {mfsLimits[selectedMfs as keyof typeof mfsLimits].min.toLocaleString()} BDT</li>
                <li>Maximum amount: {mfsLimits[selectedMfs as keyof typeof mfsLimits].max.toLocaleString()} BDT</li>
                <li>Daily deposit limit: {mfsLimits[selectedMfs as keyof typeof mfsLimits].daily.toLocaleString()} BDT</li>
              </>
            ) : (
              <li>Please select a payment method to see limits</li>
            )}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default AddMoneyPage;